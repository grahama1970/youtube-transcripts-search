{"created": 1749154492.8518329, "duration": 116.59586548805237, "exitcode": 1, "root": "/home/graham/workspace/experiments/youtube_transcripts", "environment": {}, "summary": {"passed": 85, "failed": 29, "skipped": 8, "total": 122, "collected": 122}, "collectors": [{"nodeid": "", "outcome": "passed", "result": [{"nodeid": "tests", "type": "Package"}]}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem", "outcome": "passed", "result": [{"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_agent_manager_task_submission", "type": "Coroutine", "lineno": 37}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_search_optimizer_agent_execution", "type": "Coroutine", "lineno": 63}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_agent_progress_tracking", "type": "Coroutine", "lineno": 91}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_agent_message_passing", "type": "Coroutine", "lineno": 112}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_concurrent_agent_execution", "type": "Coroutine", "lineno": 145}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_agent_error_handling", "type": "Coroutine", "lineno": 168}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_task_cancellation", "type": "Coroutine", "lineno": 187}]}, {"nodeid": "tests/agents/test_agents.py", "outcome": "passed", "result": [{"nodeid": "tests/agents/test_agents.py::TestAgentSystem", "type": "Class"}]}, {"nodeid": "tests/agents", "outcome": "passed", "result": [{"nodeid": "tests/agents/test_agents.py", "type": "Module"}]}, {"nodeid": "tests/cli", "outcome": "passed", "result": []}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations", "outcome": "passed", "result": [{"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_initialize_database_creates_tables", "type": "Function", "lineno": 37}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_add_transcript_with_real_data", "type": "Function", "lineno": 56}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_search_transcripts_with_special_characters", "type": "Function", "lineno": 90}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_search_ranking_with_real_data", "type": "Function", "lineno": 128}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_channel_filtering", "type": "Function", "lineno": 170}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_cleanup_old_transcripts", "type": "Function", "lineno": 193}]}, {"nodeid": "tests/core/test_database.py", "outcome": "passed", "result": [{"nodeid": "tests/core/test_database.py::TestDatabaseOperations", "type": "Class"}]}, {"nodeid": "tests/core/test_youtube.py::TestRealYouTube", "outcome": "passed", "result": [{"nodeid": "tests/core/test_youtube.py::TestRealYouTube::test_extract_video_id", "type": "Function", "lineno": 23}, {"nodeid": "tests/core/test_youtube.py::TestRealYouTube::test_fetch_real_transcript", "type": "Function", "lineno": 37}, {"nodeid": "tests/core/test_youtube.py::TestRealYouTube::test_get_channel_videos_real", "type": "Function", "lineno": 54}, {"nodeid": "tests/core/test_youtube.py::TestRealYouTube::test_process_channels_with_empty_list", "type": "Function", "lineno": 78}]}, {"nodeid": "tests/core/test_youtube.py", "outcome": "passed", "result": [{"nodeid": "tests/core/test_youtube.py::TestRealYouTube", "type": "Class"}]}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline", "outcome": "passed", "result": [{"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline::test_pipeline_initialization", "type": "Function", "lineno": 23}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline::test_citation_detection", "type": "Function", "lineno": 31}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline::test_institution_recognition", "type": "Function", "lineno": 48}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline::test_technical_term_extraction", "type": "Function", "lineno": 62}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline::test_speaker_extraction_in_pipeline", "type": "Function", "lineno": 79}]}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestCitationDetector", "outcome": "passed", "result": [{"nodeid": "tests/core/utils/test_scientific_extractors.py::TestCitationDetector::test_arxiv_detection", "type": "Function", "lineno": 97}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestCitationDetector::test_doi_detection", "type": "Function", "lineno": 113}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestCitationDetector::test_author_year_detection", "type": "Function", "lineno": 128}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestCitationDetector::test_citation_formatting", "type": "Function", "lineno": 144}]}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestSpeakerExtractor", "outcome": "passed", "result": [{"nodeid": "tests/core/utils/test_scientific_extractors.py::TestSpeakerExtractor::test_introduction_extraction", "type": "Function", "lineno": 176}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestSpeakerExtractor::test_labeled_speaker_extraction", "type": "Function", "lineno": 195}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestSpeakerExtractor::test_speaker_deduplication", "type": "Function", "lineno": 217}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestSpeakerExtractor::test_speaker_formatting", "type": "Function", "lineno": 231}]}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestContentClassifier", "outcome": "passed", "result": [{"nodeid": "tests/core/utils/test_scientific_extractors.py::TestContentClassifier::test_content_type_classification", "type": "Function", "lineno": 258}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestContentClassifier::test_academic_level_classification", "type": "Function", "lineno": 291}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestContentClassifier::test_topic_extraction", "type": "Function", "lineno": 324}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestContentClassifier::test_quality_indicators", "type": "Function", "lineno": 343}]}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestMetadataExtractor", "outcome": "passed", "result": [{"nodeid": "tests/core/utils/test_scientific_extractors.py::TestMetadataExtractor::test_full_extraction", "type": "Function", "lineno": 373}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestMetadataExtractor::test_batch_extraction", "type": "Function", "lineno": 410}]}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestIntegration", "outcome": "passed", "result": [{"nodeid": "tests/core/utils/test_scientific_extractors.py::TestIntegration::test_end_to_end_extraction", "type": "Function", "lineno": 437}]}, {"nodeid": "tests/core/utils/test_scientific_extractors.py", "outcome": "passed", "result": [{"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline", "type": "Class"}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestCitationDetector", "type": "Class"}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestSpeakerExtractor", "type": "Class"}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestContentClassifier", "type": "Class"}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestMetadataExtractor", "type": "Class"}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestIntegration", "type": "Class"}]}, {"nodeid": "tests/core/utils", "outcome": "passed", "result": [{"nodeid": "tests/core/utils/test_scientific_extractors.py", "type": "Module"}]}, {"nodeid": "tests/core", "outcome": "passed", "result": [{"nodeid": "tests/core/test_database.py", "type": "Module"}, {"nodeid": "tests/core/test_youtube.py", "type": "Module"}, {"nodeid": "tests/core/utils", "type": "Package"}]}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_store_and_retrieve_with_embeddings", "type": "Coroutine", "lineno": 170}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_hybrid_search", "type": "Coroutine", "lineno": 190}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_citation_network", "type": "Coroutine", "lineno": 209}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_speaker_relationships", "type": "Coroutine", "lineno": 229}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_entity_linking", "type": "Coroutine", "lineno": 264}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_find_related_videos", "type": "Coroutine", "lineno": 302}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_research_analyzer_integration", "type": "Coroutine", "lineno": 320}]}, {"nodeid": "tests/integration/test_arangodb_features.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration", "type": "Class"}]}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_citation_validation_pipeline", "type": "Coroutine", "lineno": 86}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_research_enhancement_pipeline", "type": "Coroutine", "lineno": 113}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_cross_reference_search", "type": "Function", "lineno": 142}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_evidence_based_validation", "type": "Coroutine", "lineno": 162}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_unified_metadata_extraction", "type": "Function", "lineno": 201}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_research_discovery_workflow", "type": "Coroutine", "lineno": 230}]}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration", "type": "Class"}]}, {"nodeid": "tests/integration/test_database_adapter.py::TestReportGenerator", "outcome": "passed", "result": []}, {"nodeid": "tests/integration/test_database_adapter.py::TestSQLiteBackend", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_database_adapter.py::TestSQLiteBackend::test_sqlite_initialization", "type": "Coroutine", "lineno": 123}, {"nodeid": "tests/integration/test_database_adapter.py::TestSQLiteBackend::test_sqlite_store_and_retrieve", "type": "Coroutine", "lineno": 161}, {"nodeid": "tests/integration/test_database_adapter.py::TestSQLiteBackend::test_sqlite_search", "type": "Coroutine", "lineno": 199}, {"nodeid": "tests/integration/test_database_adapter.py::TestSQLiteBackend::test_sqlite_evidence_finding", "type": "Coroutine", "lineno": 237}]}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseAdapter", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseAdapter::test_auto_detection", "type": "Coroutine", "lineno": 271}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseAdapter::test_forced_backends", "type": "Coroutine", "lineno": 296}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseAdapter::test_adapter_interface", "type": "Coroutine", "lineno": 329}]}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseConfig", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseConfig::test_config_from_env", "type": "Function", "lineno": 372}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseConfig::test_backend_config_generation", "type": "Function", "lineno": 405}]}, {"nodeid": "tests/integration/test_database_adapter.py", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_database_adapter.py::TestReportGenerator", "type": "Class"}, {"nodeid": "tests/integration/test_database_adapter.py::TestSQLiteBackend", "type": "Class"}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseAdapter", "type": "Class"}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseConfig", "type": "Class"}, {"nodeid": "tests/integration/test_database_adapter.py::test_full_integration_flow", "type": "Coroutine", "lineno": 430}]}, {"nodeid": "tests/integration", "outcome": "passed", "result": [{"nodeid": "tests/integration/test_arangodb_features.py", "type": "Module"}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py", "type": "Module"}, {"nodeid": "tests/integration/test_database_adapter.py", "type": "Module"}]}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized", "outcome": "passed", "result": [{"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_module_attributes", "type": "Coroutine", "lineno": 30}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_standardized_response_format", "type": "Coroutine", "lineno": 45}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_error_response_format", "type": "Coroutine", "lineno": 71}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_fetch_transcript_missing_params", "type": "Coroutine", "lineno": 91}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_search_transcripts", "type": "Coroutine", "lineno": 105}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_get_channel_videos", "type": "Coroutine", "lineno": 126}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_extract_keywords_with_transcript", "type": "Coroutine", "lineno": 145}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_extract_keywords_with_video_id", "type": "Coroutine", "lineno": 164}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_summarize_video_with_id", "type": "Coroutine", "lineno": 180}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_summarize_video_missing_params", "type": "Coroutine", "lineno": 200}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_multiple_actions_sequence", "type": "Coroutine", "lineno": 215}]}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py", "outcome": "passed", "result": [{"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized", "type": "Class"}]}, {"nodeid": "tests/level_0", "outcome": "passed", "result": [{"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py", "type": "Module"}]}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry", "outcome": "passed", "result": [{"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_registry_creation", "type": "Function", "lineno": 22}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_register_prompt", "type": "Function", "lineno": 29}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_get_prompt", "type": "Function", "lineno": 51}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_execute_prompt", "type": "Coroutine", "lineno": 66}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_execute_with_registry_injection", "type": "Coroutine", "lineno": 78}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_prompt_parameters_extraction", "type": "Function", "lineno": 91}]}, {"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptDecorator", "outcome": "passed", "result": [{"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptDecorator::test_decorator_registration", "type": "Function", "lineno": 124}, {"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptDecorator::test_decorator_with_examples", "type": "Function", "lineno": 146}]}, {"nodeid": "tests/mcp/test_prompts.py::TestFormatPromptResponse", "outcome": "passed", "result": [{"nodeid": "tests/mcp/test_prompts.py::TestFormatPromptResponse::test_basic_formatting", "type": "Function", "lineno": 169}, {"nodeid": "tests/mcp/test_prompts.py::TestFormatPromptResponse::test_formatting_with_next_steps", "type": "Function", "lineno": 176}, {"nodeid": "tests/mcp/test_prompts.py::TestFormatPromptResponse::test_formatting_with_suggestions", "type": "Function", "lineno": 188}, {"nodeid": "tests/mcp/test_prompts.py::TestFormatPromptResponse::test_formatting_with_data", "type": "Function", "lineno": 203}]}, {"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptSchema", "outcome": "passed", "result": [{"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptSchema::test_prompt_to_schema", "type": "Function", "lineno": 220}, {"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptSchema::test_registry_to_schema", "type": "Function", "lineno": 241}]}, {"nodeid": "tests/mcp/test_prompts.py", "outcome": "passed", "result": [{"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry", "type": "Class"}, {"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptDecorator", "type": "Class"}, {"nodeid": "tests/mcp/test_prompts.py::TestFormatPromptResponse", "type": "Class"}, {"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptSchema", "type": "Class"}, {"nodeid": "tests/mcp/test_prompts.py::test_full_prompt_workflow", "type": "Coroutine", "lineno": 263}, {"nodeid": "tests/mcp/test_prompts.py::test_error_handling", "type": "Coroutine", "lineno": 301}]}, {"nodeid": "tests/mcp", "outcome": "passed", "result": [{"nodeid": "tests/mcp/test_prompts.py", "type": "Module"}]}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios", "outcome": "passed", "result": [{"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_1_basic_search", "type": "Function", "lineno": 47}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_2_search_with_no_results", "type": "Function", "lineno": 97}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_3_search_widening", "type": "Function", "lineno": 113}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_4_citation_extraction", "type": "Function", "lineno": 140}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_5_metadata_extraction", "type": "Function", "lineno": 172}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_6_channel_filtering", "type": "Function", "lineno": 214}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_7_youtube_api_search", "type": "Function", "lineno": 247}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_8_fetch_transcript", "type": "Function", "lineno": 275}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_9_search_pagination", "type": "Function", "lineno": 298}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_10_scientific_classification", "type": "Function", "lineno": 331}]}, {"nodeid": "tests/scenarios/test_level0_scenarios.py", "outcome": "passed", "result": [{"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios", "type": "Class"}]}, {"nodeid": "tests/scenarios", "outcome": "passed", "result": [{"nodeid": "tests/scenarios/test_level0_scenarios.py", "type": "Module"}]}, {"nodeid": "tests/test_all_integrations.py", "outcome": "passed", "result": []}, {"nodeid": "tests/test_arangodb_connection.py", "outcome": "passed", "result": [{"nodeid": "tests/test_arangodb_connection.py::test_connection", "type": "Function", "lineno": 31}]}, {"nodeid": "tests/test_integration_summary.py", "outcome": "passed", "result": [{"nodeid": "tests/test_integration_summary.py::test_integration", "type": "Coroutine", "lineno": 18}]}, {"nodeid": "tests/test_minimal.py", "outcome": "passed", "result": [{"nodeid": "tests/test_minimal.py::test_basic", "type": "Function", "lineno": 2}, {"nodeid": "tests/test_minimal.py::test_import_youtube_transcripts", "type": "Function", "lineno": 6}, {"nodeid": "tests/test_minimal.py::test_import_agents", "type": "Function", "lineno": 11}, {"nodeid": "tests/test_minimal.py::test_import_agent_manager", "type": "Function", "lineno": 16}]}, {"nodeid": "tests/test_reporter_verification.py::TestReporterClass", "outcome": "passed", "result": [{"nodeid": "tests/test_reporter_verification.py::TestReporterClass::test_class_method", "type": "Function", "lineno": 37}, {"nodeid": "tests/test_reporter_verification.py::TestReporterClass::test_class_method_with_fixture", "type": "Function", "lineno": 42}]}, {"nodeid": "tests/test_reporter_verification.py", "outcome": "passed", "result": [{"nodeid": "tests/test_reporter_verification.py::test_reporter_basic", "type": "Function", "lineno": 6}, {"nodeid": "tests/test_reporter_verification.py::test_reporter_with_output", "type": "Function", "lineno": 11}, {"nodeid": "tests/test_reporter_verification.py::test_reporter_failure_example", "type": "Function", "lineno": 18}, {"nodeid": "tests/test_reporter_verification.py::test_reporter_with_marker", "type": "Function", "lineno": 26}, {"nodeid": "tests/test_reporter_verification.py::TestReporterClass", "type": "Class"}]}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening", "outcome": "passed", "result": [{"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_exact_match_no_widening", "type": "Function", "lineno": 60}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_synonym_expansion", "type": "Function", "lineno": 71}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_fuzzy_matching", "type": "Function", "lineno": 86}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_no_results_after_widening", "type": "Function", "lineno": 97}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_widening_with_channels", "type": "Function", "lineno": 107}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_semantic_expansion", "type": "Function", "lineno": 120}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_widening_explanation", "type": "Function", "lineno": 141}]}, {"nodeid": "tests/test_search_widening.py", "outcome": "passed", "result": [{"nodeid": "tests/test_search_widening.py::TestSearchWidening", "type": "Class"}]}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch", "outcome": "passed", "result": [{"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_basic_search_without_optimization", "type": "Function", "lineno": 74}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_search_with_optimization", "type": "Function", "lineno": 107}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_channel_specific_search", "type": "Function", "lineno": 124}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_query_optimizer_directly", "type": "Function", "lineno": 145}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_empty_query_handling", "type": "Function", "lineno": 169}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_multi_word_search", "type": "Function", "lineno": 183}]}, {"nodeid": "tests/test_unified_search.py", "outcome": "passed", "result": [{"nodeid": "tests/test_unified_search.py::TestUnifiedSearch", "type": "Class"}]}, {"nodeid": "tests", "outcome": "passed", "result": [{"nodeid": "tests/agents", "type": "Package"}, {"nodeid": "tests/cli", "type": "Package"}, {"nodeid": "tests/core", "type": "Package"}, {"nodeid": "tests/integration", "type": "Dir"}, {"nodeid": "tests/level_0", "type": "Package"}, {"nodeid": "tests/mcp", "type": "Package"}, {"nodeid": "tests/scenarios", "type": "Dir"}, {"nodeid": "tests/test_all_integrations.py", "type": "Module"}, {"nodeid": "tests/test_arangodb_connection.py", "type": "Module"}, {"nodeid": "tests/test_integration_summary.py", "type": "Module"}, {"nodeid": "tests/test_minimal.py", "type": "Module"}, {"nodeid": "tests/test_reporter_verification.py", "type": "Module"}, {"nodeid": "tests/test_search_widening.py", "type": "Module"}, {"nodeid": "tests/test_unified_search.py", "type": "Module"}]}], "tests": [{"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_agent_manager_task_submission", "lineno": 37, "outcome": "passed", "keywords": ["test_agent_manager_task_submission", "asyncio", "pytestmark", "TestAgentSystem", "test_agents.py", "agents", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.013189097866415977, "outcome": "passed"}, "call": {"duration": 1.0108215459622443, "outcome": "passed"}, "teardown": {"duration": 0.0004891101270914078, "outcome": "passed"}}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_search_optimizer_agent_execution", "lineno": 63, "outcome": "passed", "keywords": ["test_search_optimizer_agent_execution", "asyncio", "pytestmark", "TestAgentSystem", "test_agents.py", "agents", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.010274027939885855, "outcome": "passed"}, "call": {"duration": 0.006507162004709244, "outcome": "passed"}, "teardown": {"duration": 0.00031368574127554893, "outcome": "passed"}}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_agent_progress_tracking", "lineno": 91, "outcome": "passed", "keywords": ["test_agent_progress_tracking", "asyncio", "pytestmark", "TestAgentSystem", "test_agents.py", "agents", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.006837759166955948, "outcome": "passed"}, "call": {"duration": 0.5031933528371155, "outcome": "passed"}, "teardown": {"duration": 0.0004329490475356579, "outcome": "passed"}}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_agent_message_passing", "lineno": 112, "outcome": "passed", "keywords": ["test_agent_message_passing", "asyncio", "pytestmark", "TestAgentSystem", "test_agents.py", "agents", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.007247867062687874, "outcome": "passed"}, "call": {"duration": 0.0037262863479554653, "outcome": "passed"}, "teardown": {"duration": 0.00030400604009628296, "outcome": "passed"}}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_concurrent_agent_execution", "lineno": 145, "outcome": "failed", "keywords": ["test_concurrent_agent_execution", "asyncio", "pytestmark", "TestAgentSystem", "test_agents.py", "agents", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.006712946109473705, "outcome": "passed"}, "call": {"duration": 1.0271794591099024, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/agents/test_agents.py", "lineno": 167, "message": "AssertionError: Expected 3 completed tasks, got 0\nassert 0 == 3"}, "longrepr": "E   AssertionError: Expected 3 completed tasks, got 0\n    assert 0 == 3"}, "teardown": {"duration": 0.0006578029133379459, "outcome": "passed"}}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_agent_error_handling", "lineno": 168, "outcome": "passed", "keywords": ["test_agent_error_handling", "asyncio", "pytestmark", "TestAgentSystem", "test_agents.py", "agents", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.008383721113204956, "outcome": "passed"}, "call": {"duration": 1.0047326222993433, "outcome": "passed"}, "teardown": {"duration": 0.00042981794103980064, "outcome": "passed"}}, {"nodeid": "tests/agents/test_agents.py::TestAgentSystem::test_task_cancellation", "lineno": 187, "outcome": "failed", "keywords": ["test_task_cancellation", "asyncio", "pytestmark", "TestAgentSystem", "test_agents.py", "agents", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0073386686854064465, "outcome": "passed"}, "call": {"duration": 0.10419575683772564, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/agents/test_agents.py", "lineno": 206, "message": "AssertionError: assert 'FAILED' in ['CANCELLED', 'COMPLETED']"}, "longrepr": "E   AssertionError: assert 'FAILED' in ['CANCELLED', 'COMPLETED']"}, "teardown": {"duration": 0.0006707627326250076, "outcome": "passed"}}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_initialize_database_creates_tables", "lineno": 37, "outcome": "passed", "keywords": ["test_initialize_database_creates_tables", "TestDatabaseOperations", "test_database.py", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.003572522196918726, "outcome": "passed"}, "call": {"duration": 0.00040703779086470604, "outcome": "passed"}, "teardown": {"duration": 0.00016144290566444397, "outcome": "passed"}}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_add_transcript_with_real_data", "lineno": 56, "outcome": "passed", "keywords": ["test_add_transcript_with_real_data", "TestDatabaseOperations", "test_database.py", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0019267094321548939, "outcome": "passed"}, "call": {"duration": 0.0016599143855273724, "outcome": "passed"}, "teardown": {"duration": 0.0001618531532585621, "outcome": "passed"}}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_search_transcripts_with_special_characters", "lineno": 90, "outcome": "passed", "keywords": ["test_search_transcripts_with_special_characters", "TestDatabaseOperations", "test_database.py", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0019492101855576038, "outcome": "passed"}, "call": {"duration": 0.0036487439647316933, "outcome": "passed"}, "teardown": {"duration": 0.00016693398356437683, "outcome": "passed"}}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_search_ranking_with_real_data", "lineno": 128, "outcome": "passed", "keywords": ["test_search_ranking_with_real_data", "TestDatabaseOperations", "test_database.py", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0019090492278337479, "outcome": "passed"}, "call": {"duration": 0.002792686689645052, "outcome": "passed"}, "teardown": {"duration": 0.00015574274584650993, "outcome": "passed"}}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_channel_filtering", "lineno": 170, "outcome": "passed", "keywords": ["test_channel_filtering", "TestDatabaseOperations", "test_database.py", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0020350608974695206, "outcome": "passed"}, "call": {"duration": 0.004221335984766483, "outcome": "passed"}, "teardown": {"duration": 0.00015888316556811333, "outcome": "passed"}}, {"nodeid": "tests/core/test_database.py::TestDatabaseOperations::test_cleanup_old_transcripts", "lineno": 193, "outcome": "passed", "keywords": ["test_cleanup_old_transcripts", "TestDatabaseOperations", "test_database.py", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0019491701386868954, "outcome": "passed"}, "call": {"duration": 0.004514951724559069, "outcome": "passed"}, "teardown": {"duration": 0.00015568267554044724, "outcome": "passed"}}, {"nodeid": "tests/core/test_youtube.py::TestRealYouTube::test_extract_video_id", "lineno": 23, "outcome": "passed", "keywords": ["test_extract_video_id", "TestRealYouTube", "test_youtube.py", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010670209303498268, "outcome": "passed"}, "call": {"duration": 0.00033865729346871376, "outcome": "passed"}, "teardown": {"duration": 8.611194789409637e-05, "outcome": "passed"}}, {"nodeid": "tests/core/test_youtube.py::TestRealYouTube::test_fetch_real_transcript", "lineno": 37, "outcome": "passed", "keywords": ["test_fetch_real_transcript", "slow", "pytestmark", "TestRealYouTube", "test_youtube.py", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 9.604217484593391e-05, "outcome": "passed"}, "call": {"duration": 1.0294959261082113, "outcome": "passed", "stdout": "\nFetched transcript length: 217 characters\nFirst 100 chars: All right, so here we are, in front of the\nelephants the cool thing about these guys is that they\nha...\n"}, "teardown": {"duration": 0.00022485526278614998, "outcome": "passed"}}, {"nodeid": "tests/core/test_youtube.py::TestRealYouTube::test_get_channel_videos_real", "lineno": 54, "outcome": "passed", "keywords": ["test_get_channel_videos_real", "slow", "pytestmark", "TestRealYouTube", "test_youtube.py", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00023030489683151245, "outcome": "passed"}, "call": {"duration": 10.284503753297031, "outcome": "passed", "stdout": "\nFetched 3 videos from channel\nFirst video: YouTube - Videos\n"}, "teardown": {"duration": 0.00011429283767938614, "outcome": "passed"}}, {"nodeid": "tests/core/test_youtube.py::TestRealYouTube::test_process_channels_with_empty_list", "lineno": 78, "outcome": "passed", "keywords": ["test_process_channels_with_empty_list", "TestRealYouTube", "test_youtube.py", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0001127920113503933, "outcome": "passed"}, "call": {"duration": 0.00011515198275446892, "outcome": "passed"}, "teardown": {"duration": 8.723186329007149e-05, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline::test_pipeline_initialization", "lineno": 23, "outcome": "passed", "keywords": ["test_pipeline_initialization", "TestScientificPipeline", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00032160617411136627, "outcome": "passed"}, "call": {"duration": 0.3891994901932776, "outcome": "passed"}, "teardown": {"duration": 0.0001160530373454094, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline::test_citation_detection", "lineno": 31, "outcome": "passed", "keywords": ["test_citation_detection", "TestScientificPipeline", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011460203677415848, "outcome": "passed"}, "call": {"duration": 0.3250869237817824, "outcome": "passed"}, "teardown": {"duration": 0.00011251168325543404, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline::test_institution_recognition", "lineno": 48, "outcome": "passed", "keywords": ["test_institution_recognition", "TestScientificPipeline", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011463230475783348, "outcome": "passed"}, "call": {"duration": 0.3384964158758521, "outcome": "passed"}, "teardown": {"duration": 0.00015048403292894363, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline::test_technical_term_extraction", "lineno": 62, "outcome": "passed", "keywords": ["test_technical_term_extraction", "TestScientificPipeline", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0001148022711277008, "outcome": "passed"}, "call": {"duration": 0.3309164261445403, "outcome": "passed"}, "teardown": {"duration": 0.00011256290599703789, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestScientificPipeline::test_speaker_extraction_in_pipeline", "lineno": 79, "outcome": "passed", "keywords": ["test_speaker_extraction_in_pipeline", "TestScientificPipeline", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011129211634397507, "outcome": "passed"}, "call": {"duration": 0.3239782303571701, "outcome": "passed"}, "teardown": {"duration": 0.00011515291407704353, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestCitationDetector::test_arxiv_detection", "lineno": 97, "outcome": "passed", "keywords": ["test_arxiv_detection", "TestCitationDetector", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011162180453538895, "outcome": "passed"}, "call": {"duration": 0.3239881400950253, "outcome": "passed"}, "teardown": {"duration": 0.00011251214891672134, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestCitationDetector::test_doi_detection", "lineno": 113, "outcome": "passed", "keywords": ["test_doi_detection", "TestCitationDetector", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011568283662199974, "outcome": "passed"}, "call": {"duration": 0.32034529419615865, "outcome": "passed"}, "teardown": {"duration": 0.00013053324073553085, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestCitationDetector::test_author_year_detection", "lineno": 128, "outcome": "failed", "keywords": ["test_author_year_detection", "TestCitationDetector", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011001294478774071, "outcome": "passed"}, "call": {"duration": 0.3223037449643016, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/core/utils/test_scientific_extractors.py", "lineno": 139, "message": "AssertionError: assert 1 >= 4\n +  where 1 = len([Citation(type='author_year', text='Smith and Jones (2022)', id=None, authors='Smith and Jones', year='2022', title=None, context='(2017) and Devlin et al., 2019. \\n        See also Smith and Jones (2022) and the work by Liu et al. 2023.', confidence=1.0, position=(77, 99))])"}, "longrepr": "E   AssertionError: assert 1 >= 4\n     +  where 1 = len([Citation(type='author_year', text='Smith and Jones (2022)', id=None, authors='Smith and Jones', year='2022', title=None, context='(2017) and Devlin et al., 2019. \\n        See also Smith and Jones (2022) and the work by Liu et al. 2023.', confidence=1.0, position=(77, 99))])"}, "teardown": {"duration": 0.00011627282947301865, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestCitationDetector::test_citation_formatting", "lineno": 144, "outcome": "passed", "keywords": ["test_citation_formatting", "TestCitationDetector", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010979222133755684, "outcome": "passed"}, "call": {"duration": 0.3205665675923228, "outcome": "passed"}, "teardown": {"duration": 0.00012417277321219444, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestSpeakerExtractor::test_introduction_extraction", "lineno": 176, "outcome": "passed", "keywords": ["test_introduction_extraction", "TestSpeakerExtractor", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0001542540267109871, "outcome": "passed"}, "call": {"duration": 0.5827443497255445, "outcome": "passed"}, "teardown": {"duration": 0.00011695222929120064, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestSpeakerExtractor::test_labeled_speaker_extraction", "lineno": 195, "outcome": "failed", "keywords": ["test_labeled_speaker_extraction", "TestSpeakerExtractor", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011108163744211197, "outcome": "passed"}, "call": {"duration": 0.31857830565422773, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/core/utils/test_scientific_extractors.py", "lineno": 216, "message": "assert False\n +  where False = any(<generator object TestSpeakerExtractor.test_labeled_speaker_extraction.<locals>.<genexpr> at 0x737da0b6dbe0>)"}, "longrepr": "E   assert False\n     +  where False = any(<generator object TestSpeakerExtractor.test_labeled_speaker_extraction.<locals>.<genexpr> at 0x737da0b6dbe0>)"}, "teardown": {"duration": 0.00016894284635782242, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestSpeakerExtractor::test_speaker_deduplication", "lineno": 217, "outcome": "passed", "keywords": ["test_speaker_deduplication", "TestSpeakerExtractor", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010810233652591705, "outcome": "passed"}, "call": {"duration": 0.30395645927637815, "outcome": "passed"}, "teardown": {"duration": 0.00011442182585597038, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestSpeakerExtractor::test_speaker_formatting", "lineno": 231, "outcome": "passed", "keywords": ["test_speaker_formatting", "TestSpeakerExtractor", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010950164869427681, "outcome": "passed"}, "call": {"duration": 0.3077225680463016, "outcome": "passed"}, "teardown": {"duration": 0.00012636184692382812, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestContentClassifier::test_content_type_classification", "lineno": 258, "outcome": "passed", "keywords": ["test_content_type_classification", "TestContentClassifier", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0001142420805990696, "outcome": "passed"}, "call": {"duration": 0.004547385964542627, "outcome": "passed"}, "teardown": {"duration": 9.19918529689312e-05, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestContentClassifier::test_academic_level_classification", "lineno": 291, "outcome": "passed", "keywords": ["test_academic_level_classification", "TestContentClassifier", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 9.503215551376343e-05, "outcome": "passed"}, "call": {"duration": 0.003605065867304802, "outcome": "passed"}, "teardown": {"duration": 8.456222712993622e-05, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestContentClassifier::test_topic_extraction", "lineno": 324, "outcome": "passed", "keywords": ["test_topic_extraction", "TestContentClassifier", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 9.366171434521675e-05, "outcome": "passed"}, "call": {"duration": 0.001973902340978384, "outcome": "passed"}, "teardown": {"duration": 8.283229544758797e-05, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestContentClassifier::test_quality_indicators", "lineno": 343, "outcome": "failed", "keywords": ["test_quality_indicators", "TestContentClassifier", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 9.27322544157505e-05, "outcome": "passed"}, "call": {"duration": 0.004870593082159758, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/core/utils/test_scientific_extractors.py", "lineno": 366, "message": "assert 0.4666666666666667 > 0.5"}, "longrepr": "E   assert 0.4666666666666667 > 0.5"}, "teardown": {"duration": 9.180186316370964e-05, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestMetadataExtractor::test_full_extraction", "lineno": 373, "outcome": "passed", "keywords": ["test_full_extraction", "TestMetadataExtractor", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 9.47718508541584e-05, "outcome": "passed"}, "call": {"duration": 0.3447875347919762, "outcome": "passed"}, "teardown": {"duration": 0.00011423183605074883, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestMetadataExtractor::test_batch_extraction", "lineno": 410, "outcome": "passed", "keywords": ["test_batch_extraction", "TestMetadataExtractor", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011725211516022682, "outcome": "passed"}, "call": {"duration": 0.34821168798953295, "outcome": "passed"}, "teardown": {"duration": 0.00011467281728982925, "outcome": "passed"}}, {"nodeid": "tests/core/utils/test_scientific_extractors.py::TestIntegration::test_end_to_end_extraction", "lineno": 437, "outcome": "failed", "keywords": ["test_end_to_end_extraction", "TestIntegration", "test_scientific_extractors.py", "utils", "core", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011702300980687141, "outcome": "passed"}, "call": {"duration": 0.3611045479774475, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/core/utils/test_scientific_extractors.py", "lineno": 474, "message": "AssertionError: assert 'Stanford' in ['NLP', 'MIT', 'BERT', 'GPT']"}, "longrepr": "E   AssertionError: assert 'Stanford' in ['NLP', 'MIT', 'BERT', 'GPT']"}, "teardown": {"duration": 0.0001240018755197525, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_store_and_retrieve_with_embeddings", "lineno": 170, "outcome": "skipped", "keywords": ["test_store_and_retrieve_with_embeddings", "asyncio", "pytestmark", "TestArangoDBIntegration", "skipif", "test_arangodb_features.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 9.955232962965965e-05, "outcome": "skipped", "longrepr": "('/home/graham/workspace/experiments/youtube_transcripts/tests/integration/test_arangodb_features.py', 171, 'Skipped: ArangoDB utilities not available')"}, "teardown": {"duration": 8.538225665688515e-05, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_hybrid_search", "lineno": 190, "outcome": "skipped", "keywords": ["test_hybrid_search", "asyncio", "pytestmark", "TestArangoDBIntegration", "skipif", "test_arangodb_features.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 8.618179708719254e-05, "outcome": "skipped", "longrepr": "('/home/graham/workspace/experiments/youtube_transcripts/tests/integration/test_arangodb_features.py', 191, 'Skipped: ArangoDB utilities not available')"}, "teardown": {"duration": 8.929194882512093e-05, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_citation_network", "lineno": 209, "outcome": "skipped", "keywords": ["test_citation_network", "asyncio", "pytestmark", "TestArangoDBIntegration", "skipif", "test_arangodb_features.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 8.30511562526226e-05, "outcome": "skipped", "longrepr": "('/home/graham/workspace/experiments/youtube_transcripts/tests/integration/test_arangodb_features.py', 210, 'Skipped: ArangoDB utilities not available')"}, "teardown": {"duration": 9.756209328770638e-05, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_speaker_relationships", "lineno": 229, "outcome": "skipped", "keywords": ["test_speaker_relationships", "asyncio", "pytestmark", "TestArangoDBIntegration", "skipif", "test_arangodb_features.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 9.528221562504768e-05, "outcome": "skipped", "longrepr": "('/home/graham/workspace/experiments/youtube_transcripts/tests/integration/test_arangodb_features.py', 230, 'Skipped: ArangoDB utilities not available')"}, "teardown": {"duration": 9.991182014346123e-05, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_entity_linking", "lineno": 264, "outcome": "skipped", "keywords": ["test_entity_linking", "asyncio", "pytestmark", "TestArangoDBIntegration", "skipif", "test_arangodb_features.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 9.523192420601845e-05, "outcome": "skipped", "longrepr": "('/home/graham/workspace/experiments/youtube_transcripts/tests/integration/test_arangodb_features.py', 265, 'Skipped: ArangoDB utilities not available')"}, "teardown": {"duration": 0.0002053743228316307, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_find_related_videos", "lineno": 302, "outcome": "skipped", "keywords": ["test_find_related_videos", "asyncio", "pytestmark", "TestArangoDBIntegration", "skipif", "test_arangodb_features.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010928185656666756, "outcome": "skipped", "longrepr": "('/home/graham/workspace/experiments/youtube_transcripts/tests/integration/test_arangodb_features.py', 303, 'Skipped: ArangoDB utilities not available')"}, "teardown": {"duration": 8.910195901989937e-05, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arangodb_features.py::TestArangoDBIntegration::test_research_analyzer_integration", "lineno": 320, "outcome": "skipped", "keywords": ["test_research_analyzer_integration", "asyncio", "pytestmark", "TestArangoDBIntegration", "skipif", "test_arangodb_features.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 9.562214836478233e-05, "outcome": "skipped", "longrepr": "('/home/graham/workspace/experiments/youtube_transcripts/tests/integration/test_arangodb_features.py', 321, 'Skipped: ArangoDB utilities not available')"}, "teardown": {"duration": 8.997181430459023e-05, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_citation_validation_pipeline", "lineno": 86, "outcome": "failed", "keywords": ["test_citation_validation_pipeline", "asyncio", "pytestmark", "TestArxivYouTubeIntegration", "test_arxiv_youtube_integration.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.3415186768397689, "outcome": "passed", "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154411.1849387, "msecs": 184.0, "relativeCreated": 35063.066244125366, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}]}, "call": {"duration": 20.15886659687385, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/integration/test_arxiv_youtube_integration.py", "lineno": 105, "message": "assert 0 > 0\n +  where 0 = len([])"}, "longrepr": "E   assert 0 > 0\n     +  where 0 = len([])"}, "teardown": {"duration": 0.000272905919700861, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_research_enhancement_pipeline", "lineno": 113, "outcome": "failed", "keywords": ["test_research_enhancement_pipeline", "asyncio", "pytestmark", "TestArxivYouTubeIntegration", "test_arxiv_youtube_integration.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.34574999706819654, "outcome": "passed", "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154431.6866224, "msecs": 686.0, "relativeCreated": 55564.74995613098, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}]}, "call": {"duration": 0.0003182371146976948, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/metadata_extractor.py", "lineno": 187, "message": "AttributeError: 'str' object has no attribute 'text'"}, "log": [{"name": "youtube_transcripts.metadata_extractor", "msg": "Error extracting metadata: 'str' object has no attribute 'text'", "args": null, "levelname": "ERROR", "levelno": 40, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/metadata_extractor.py", "filename": "metadata_extractor.py", "module": "metadata_extractor", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 221, "funcName": "extract_metadata", "created": 1749154432.009463, "msecs": 9.0, "relativeCreated": 55887.590646743774, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": "Task-41"}], "longrepr": "E   AttributeError: 'str' object has no attribute 'text'"}, "teardown": {"duration": 0.00021730409935116768, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_cross_reference_search", "lineno": 142, "outcome": "failed", "keywords": ["test_cross_reference_search", "TestArxivYouTubeIntegration", "test_arxiv_youtube_integration.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.022447220981121063, "outcome": "passed", "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154432.033305, "msecs": 33.0, "relativeCreated": 55911.43250465393, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}]}, "call": {"duration": 5.186779974028468, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/integration/test_arxiv_youtube_integration.py", "lineno": 156, "message": "AttributeError: 'list' object has no attribute 'get'"}, "longrepr": "E   AttributeError: 'list' object has no attribute 'get'"}, "teardown": {"duration": 0.00014275265857577324, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_evidence_based_validation", "lineno": 162, "outcome": "passed", "keywords": ["test_evidence_based_validation", "asyncio", "pytestmark", "TestArxivYouTubeIntegration", "test_arxiv_youtube_integration.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.31604906218126416, "outcome": "passed"}, "call": {"duration": 0.0002319449558854103, "outcome": "passed"}, "teardown": {"duration": 0.00019503384828567505, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_unified_metadata_extraction", "lineno": 201, "outcome": "failed", "keywords": ["test_unified_metadata_extraction", "TestArxivYouTubeIntegration", "test_arxiv_youtube_integration.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.3208759338594973, "outcome": "passed"}, "call": {"duration": 0.00025359494611620903, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/metadata_extractor.py", "lineno": 187, "message": "AttributeError: 'str' object has no attribute 'text'"}, "log": [{"name": "youtube_transcripts.metadata_extractor", "msg": "Error extracting metadata: 'str' object has no attribute 'text'", "args": null, "levelname": "ERROR", "levelno": 40, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/metadata_extractor.py", "filename": "metadata_extractor.py", "module": "metadata_extractor", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 221, "funcName": "extract_metadata", "created": 1749154437.8594959, "msecs": 859.0, "relativeCreated": 61737.62345314026, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}], "longrepr": "E   AttributeError: 'str' object has no attribute 'text'"}, "teardown": {"duration": 0.0001230030320584774, "outcome": "passed"}}, {"nodeid": "tests/integration/test_arxiv_youtube_integration.py::TestArxivYouTubeIntegration::test_research_discovery_workflow", "lineno": 230, "outcome": "failed", "keywords": ["test_research_discovery_workflow", "asyncio", "pytestmark", "TestArxivYouTubeIntegration", "test_arxiv_youtube_integration.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.022705895826220512, "outcome": "passed", "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154437.8832853, "msecs": 883.0, "relativeCreated": 61761.41285896301, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}]}, "call": {"duration": 5.8609402109868824, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/integration/test_arxiv_youtube_integration.py", "lineno": 242, "message": "TypeError: list indices must be integers or slices, not str"}, "longrepr": "E   TypeError: list indices must be integers or slices, not str"}, "teardown": {"duration": 0.00026356475427746773, "outcome": "passed"}}, {"nodeid": "tests/integration/test_database_adapter.py::TestSQLiteBackend::test_sqlite_initialization", "lineno": 123, "outcome": "passed", "keywords": ["test_sqlite_initialization", "asyncio", "pytestmark", "TestSQLiteBackend", "test_database_adapter.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00043657002970576286, "outcome": "passed"}, "call": {"duration": 0.011371247936040163, "outcome": "passed"}, "teardown": {"duration": 0.00027013570070266724, "outcome": "passed"}}, {"nodeid": "tests/integration/test_database_adapter.py::TestSQLiteBackend::test_sqlite_store_and_retrieve", "lineno": 161, "outcome": "passed", "keywords": ["test_sqlite_store_and_retrieve", "asyncio", "pytestmark", "TestSQLiteBackend", "test_database_adapter.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00034395698457956314, "outcome": "passed"}, "call": {"duration": 0.011999492067843676, "outcome": "passed"}, "teardown": {"duration": 0.0002615959383547306, "outcome": "passed"}}, {"nodeid": "tests/integration/test_database_adapter.py::TestSQLiteBackend::test_sqlite_search", "lineno": 199, "outcome": "passed", "keywords": ["test_sqlite_search", "asyncio", "pytestmark", "TestSQLiteBackend", "test_database_adapter.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.000336197204887867, "outcome": "passed"}, "call": {"duration": 0.01290105003863573, "outcome": "passed"}, "teardown": {"duration": 0.0002926257438957691, "outcome": "passed"}}, {"nodeid": "tests/integration/test_database_adapter.py::TestSQLiteBackend::test_sqlite_evidence_finding", "lineno": 237, "outcome": "passed", "keywords": ["test_sqlite_evidence_finding", "asyncio", "pytestmark", "TestSQLiteBackend", "test_database_adapter.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00033803703263401985, "outcome": "passed"}, "call": {"duration": 0.012067142874002457, "outcome": "passed"}, "teardown": {"duration": 0.00026317592710256577, "outcome": "passed"}}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseAdapter::test_auto_detection", "lineno": 271, "outcome": "passed", "keywords": ["test_auto_detection", "asyncio", "pytestmark", "TestDatabaseAdapter", "test_database_adapter.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0003009871579706669, "outcome": "passed"}, "call": {"duration": 0.013986492995172739, "outcome": "passed"}, "teardown": {"duration": 0.0003569982945919037, "outcome": "passed"}}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseAdapter::test_forced_backends", "lineno": 296, "outcome": "passed", "keywords": ["test_forced_backends", "asyncio", "pytestmark", "TestDatabaseAdapter", "test_database_adapter.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0004123188555240631, "outcome": "passed"}, "call": {"duration": 0.010605483315885067, "outcome": "passed"}, "teardown": {"duration": 0.0002829963341355324, "outcome": "passed"}}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseAdapter::test_adapter_interface", "lineno": 329, "outcome": "passed", "keywords": ["test_adapter_interface", "asyncio", "pytestmark", "TestDatabaseAdapter", "test_database_adapter.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00038315821439027786, "outcome": "passed"}, "call": {"duration": 0.013585585169494152, "outcome": "passed"}, "teardown": {"duration": 0.0002766149118542671, "outcome": "passed"}}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseConfig::test_config_from_env", "lineno": 372, "outcome": "passed", "keywords": ["test_config_from_env", "TestDatabaseConfig", "test_database_adapter.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00014799321070313454, "outcome": "passed"}, "call": {"duration": 0.00015624426305294037, "outcome": "passed"}, "teardown": {"duration": 0.0001556328497827053, "outcome": "passed"}}, {"nodeid": "tests/integration/test_database_adapter.py::TestDatabaseConfig::test_backend_config_generation", "lineno": 405, "outcome": "passed", "keywords": ["test_backend_config_generation", "TestDatabaseConfig", "test_database_adapter.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00014082295820116997, "outcome": "passed"}, "call": {"duration": 0.00011573173105716705, "outcome": "passed"}, "teardown": {"duration": 0.00010716309770941734, "outcome": "passed"}}, {"nodeid": "tests/integration/test_database_adapter.py::test_full_integration_flow", "lineno": 430, "outcome": "passed", "keywords": ["test_full_integration_flow", "asyncio", "pytestmark", "test_database_adapter.py", "integration", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0003595380112528801, "outcome": "passed"}, "call": {"duration": 0.016441594809293747, "outcome": "passed"}, "teardown": {"duration": 0.0002850661985576153, "outcome": "passed"}}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_module_attributes", "lineno": 30, "outcome": "passed", "keywords": ["test_module_attributes", "asyncio", "pytestmark", "TestYoutubeTranscriptsStandardized", "test_youtube_transcripts_standardized.py", "level_0", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0007355459965765476, "outcome": "passed", "stderr": "2025-06-05 16:14:03.861 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:start:50 - youtube_transcripts module started successfully\n"}, "call": {"duration": 0.0001490926370024681, "outcome": "passed"}, "teardown": {"duration": 0.00024414481595158577, "outcome": "passed", "stderr": "2025-06-05 16:14:03.862 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:stop:58 - youtube_transcripts module stopped\n"}}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_standardized_response_format", "lineno": 45, "outcome": "passed", "keywords": ["test_standardized_response_format", "asyncio", "pytestmark", "TestYoutubeTranscriptsStandardized", "test_youtube_transcripts_standardized.py", "level_0", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00041792914271354675, "outcome": "passed", "stderr": "2025-06-05 16:14:03.862 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:start:50 - youtube_transcripts module started successfully\n"}, "call": {"duration": 0.0001475331373512745, "outcome": "passed"}, "teardown": {"duration": 0.0002359449863433838, "outcome": "passed", "stderr": "2025-06-05 16:14:03.863 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:stop:58 - youtube_transcripts module stopped\n"}}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_error_response_format", "lineno": 71, "outcome": "passed", "keywords": ["test_error_response_format", "asyncio", "pytestmark", "TestYoutubeTranscriptsStandardized", "test_youtube_transcripts_standardized.py", "level_0", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.000407238956540823, "outcome": "passed", "stderr": "2025-06-05 16:14:03.863 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:start:50 - youtube_transcripts module started successfully\n"}, "call": {"duration": 0.00013928301632404327, "outcome": "passed"}, "teardown": {"duration": 0.00023465510457754135, "outcome": "passed", "stderr": "2025-06-05 16:14:03.864 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:stop:58 - youtube_transcripts module stopped\n"}}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_fetch_transcript_missing_params", "lineno": 91, "outcome": "passed", "keywords": ["test_fetch_transcript_missing_params", "asyncio", "pytestmark", "TestYoutubeTranscriptsStandardized", "test_youtube_transcripts_standardized.py", "level_0", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00040629878640174866, "outcome": "passed", "stderr": "2025-06-05 16:14:03.864 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:start:50 - youtube_transcripts module started successfully\n"}, "call": {"duration": 0.00020400388166308403, "outcome": "passed", "stderr": "2025-06-05 16:14:03.865 | ERROR    | youtube_transcripts.integrations.youtube_transcripts_module:process:83 - Error in youtube_transcripts: video_id is required\n"}, "teardown": {"duration": 0.00023184530436992645, "outcome": "passed", "stderr": "2025-06-05 16:14:03.865 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:stop:58 - youtube_transcripts module stopped\n"}}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_search_transcripts", "lineno": 105, "outcome": "passed", "keywords": ["test_search_transcripts", "asyncio", "pytestmark", "TestYoutubeTranscriptsStandardized", "test_youtube_transcripts_standardized.py", "level_0", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00040765805169939995, "outcome": "passed", "stderr": "2025-06-05 16:14:03.865 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:start:50 - youtube_transcripts module started successfully\n"}, "call": {"duration": 0.00014030281454324722, "outcome": "passed"}, "teardown": {"duration": 0.00023013493046164513, "outcome": "passed", "stderr": "2025-06-05 16:14:03.866 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:stop:58 - youtube_transcripts module stopped\n"}}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_get_channel_videos", "lineno": 126, "outcome": "passed", "keywords": ["test_get_channel_videos", "asyncio", "pytestmark", "TestYoutubeTranscriptsStandardized", "test_youtube_transcripts_standardized.py", "level_0", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00040227919816970825, "outcome": "passed", "stderr": "2025-06-05 16:14:03.866 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:start:50 - youtube_transcripts module started successfully\n"}, "call": {"duration": 0.00014012306928634644, "outcome": "passed"}, "teardown": {"duration": 0.0003437567502260208, "outcome": "passed", "stderr": "2025-06-05 16:14:03.867 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:stop:58 - youtube_transcripts module stopped\n"}}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_extract_keywords_with_transcript", "lineno": 145, "outcome": "passed", "keywords": ["test_extract_keywords_with_transcript", "asyncio", "pytestmark", "TestYoutubeTranscriptsStandardized", "test_youtube_transcripts_standardized.py", "level_0", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0003985590301454067, "outcome": "passed", "stderr": "2025-06-05 16:14:03.868 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:start:50 - youtube_transcripts module started successfully\n"}, "call": {"duration": 0.00014331331476569176, "outcome": "passed"}, "teardown": {"duration": 0.00024506496265530586, "outcome": "passed", "stderr": "2025-06-05 16:14:03.868 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:stop:58 - youtube_transcripts module stopped\n"}}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_extract_keywords_with_video_id", "lineno": 164, "outcome": "passed", "keywords": ["test_extract_keywords_with_video_id", "asyncio", "pytestmark", "TestYoutubeTranscriptsStandardized", "test_youtube_transcripts_standardized.py", "level_0", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0003923778422176838, "outcome": "passed", "stderr": "2025-06-05 16:14:03.869 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:start:50 - youtube_transcripts module started successfully\n"}, "call": {"duration": 0.00014106323942542076, "outcome": "passed"}, "teardown": {"duration": 0.0002611749805510044, "outcome": "passed", "stderr": "2025-06-05 16:14:03.869 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:stop:58 - youtube_transcripts module stopped\n"}}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_summarize_video_with_id", "lineno": 180, "outcome": "passed", "keywords": ["test_summarize_video_with_id", "asyncio", "pytestmark", "TestYoutubeTranscriptsStandardized", "test_youtube_transcripts_standardized.py", "level_0", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00039507774636149406, "outcome": "passed", "stderr": "2025-06-05 16:14:03.870 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:start:50 - youtube_transcripts module started successfully\n"}, "call": {"duration": 0.0001435629092156887, "outcome": "passed"}, "teardown": {"duration": 0.00024693505838513374, "outcome": "passed", "stderr": "2025-06-05 16:14:03.870 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:stop:58 - youtube_transcripts module stopped\n"}}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_summarize_video_missing_params", "lineno": 200, "outcome": "passed", "keywords": ["test_summarize_video_missing_params", "asyncio", "pytestmark", "TestYoutubeTranscriptsStandardized", "test_youtube_transcripts_standardized.py", "level_0", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0003935280255973339, "outcome": "passed", "stderr": "2025-06-05 16:14:03.871 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:start:50 - youtube_transcripts module started successfully\n"}, "call": {"duration": 0.0002008737064898014, "outcome": "passed", "stderr": "2025-06-05 16:14:03.871 | ERROR    | youtube_transcripts.integrations.youtube_transcripts_module:process:83 - Error in youtube_transcripts: Either video_id or transcript is required\n"}, "teardown": {"duration": 0.0002385750412940979, "outcome": "passed", "stderr": "2025-06-05 16:14:03.871 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:stop:58 - youtube_transcripts module stopped\n"}}, {"nodeid": "tests/level_0/test_youtube_transcripts_standardized.py::TestYoutubeTranscriptsStandardized::test_multiple_actions_sequence", "lineno": 215, "outcome": "passed", "keywords": ["test_multiple_actions_sequence", "asyncio", "pytestmark", "TestYoutubeTranscriptsStandardized", "test_youtube_transcripts_standardized.py", "level_0", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0003881677985191345, "outcome": "passed", "stderr": "2025-06-05 16:14:03.872 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:start:50 - youtube_transcripts module started successfully\n"}, "call": {"duration": 0.00014739297330379486, "outcome": "passed"}, "teardown": {"duration": 0.0002400851808488369, "outcome": "passed", "stderr": "2025-06-05 16:14:03.872 | INFO     | youtube_transcripts.integrations.youtube_transcripts_module:stop:58 - youtube_transcripts module stopped\n"}}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_registry_creation", "lineno": 22, "outcome": "passed", "keywords": ["test_registry_creation", "TestPromptRegistry", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00026829633861780167, "outcome": "passed"}, "call": {"duration": 0.00011002179235219955, "outcome": "passed"}, "teardown": {"duration": 0.00010657310485839844, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_register_prompt", "lineno": 29, "outcome": "passed", "keywords": ["test_register_prompt", "TestPromptRegistry", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010845204815268517, "outcome": "passed"}, "call": {"duration": 0.0001361621543765068, "outcome": "passed"}, "teardown": {"duration": 9.514205157756805e-05, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_get_prompt", "lineno": 51, "outcome": "passed", "keywords": ["test_get_prompt", "TestPromptRegistry", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010537216439843178, "outcome": "passed"}, "call": {"duration": 0.00013184314593672752, "outcome": "passed"}, "teardown": {"duration": 9.353179484605789e-05, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_execute_prompt", "lineno": 66, "outcome": "passed", "keywords": ["test_execute_prompt", "asyncio", "pytestmark", "TestPromptRegistry", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00020746514201164246, "outcome": "passed"}, "call": {"duration": 0.0001870640553534031, "outcome": "passed"}, "teardown": {"duration": 0.00016783270984888077, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_execute_with_registry_injection", "lineno": 78, "outcome": "passed", "keywords": ["test_execute_with_registry_injection", "asyncio", "pytestmark", "TestPromptRegistry", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0002063242718577385, "outcome": "passed"}, "call": {"duration": 0.00017485441640019417, "outcome": "passed"}, "teardown": {"duration": 0.0001562228426337242, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestPromptRegistry::test_prompt_parameters_extraction", "lineno": 91, "outcome": "passed", "keywords": ["test_prompt_parameters_extraction", "TestPromptRegistry", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011162227019667625, "outcome": "passed"}, "call": {"duration": 0.00013864319771528244, "outcome": "passed"}, "teardown": {"duration": 9.591178968548775e-05, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptDecorator::test_decorator_registration", "lineno": 124, "outcome": "passed", "keywords": ["test_decorator_registration", "TestMCPPromptDecorator", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010594213381409645, "outcome": "passed"}, "call": {"duration": 0.000119832344353199, "outcome": "passed"}, "teardown": {"duration": 9.70223918557167e-05, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptDecorator::test_decorator_with_examples", "lineno": 146, "outcome": "passed", "keywords": ["test_decorator_with_examples", "TestMCPPromptDecorator", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011079199612140656, "outcome": "passed"}, "call": {"duration": 0.00011770334094762802, "outcome": "passed"}, "teardown": {"duration": 9.979261085391045e-05, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestFormatPromptResponse::test_basic_formatting", "lineno": 169, "outcome": "passed", "keywords": ["test_basic_formatting", "TestFormatPromptResponse", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011085206642746925, "outcome": "passed"}, "call": {"duration": 0.00010530184954404831, "outcome": "passed"}, "teardown": {"duration": 9.261211380362511e-05, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestFormatPromptResponse::test_formatting_with_next_steps", "lineno": 176, "outcome": "passed", "keywords": ["test_formatting_with_next_steps", "TestFormatPromptResponse", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010354211553931236, "outcome": "passed"}, "call": {"duration": 0.00010393233969807625, "outcome": "passed"}, "teardown": {"duration": 9.352155029773712e-05, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestFormatPromptResponse::test_formatting_with_suggestions", "lineno": 188, "outcome": "passed", "keywords": ["test_formatting_with_suggestions", "TestFormatPromptResponse", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010617310181260109, "outcome": "passed"}, "call": {"duration": 0.00010337214916944504, "outcome": "passed"}, "teardown": {"duration": 9.346194565296173e-05, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestFormatPromptResponse::test_formatting_with_data", "lineno": 203, "outcome": "failed", "keywords": ["test_formatting_with_data", "TestFormatPromptResponse", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0001045428216457367, "outcome": "passed"}, "call": {"duration": 0.00025657517835497856, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/mcp/test_prompts.py", "lineno": 215, "message": "assert '\"items\": [\"a\", \"b\"]' in 'Results\\n\\n## Data\\n```json\\n{\\n  \"count\": 42,\\n  \"items\": [\\n    \"a\",\\n    \"b\"\\n  ]\\n}\\n```'"}, "longrepr": "E   assert '\"items\": [\"a\", \"b\"]' in 'Results\\n\\n## Data\\n```json\\n{\\n  \"count\": 42,\\n  \"items\": [\\n    \"a\",\\n    \"b\"\\n  ]\\n}\\n```'"}, "teardown": {"duration": 0.00010092230513691902, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptSchema::test_prompt_to_schema", "lineno": 220, "outcome": "passed", "keywords": ["test_prompt_to_schema", "TestMCPPromptSchema", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010698195546865463, "outcome": "passed"}, "call": {"duration": 0.00010877195745706558, "outcome": "passed"}, "teardown": {"duration": 9.280210360884666e-05, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::TestMCPPromptSchema::test_registry_to_schema", "lineno": 241, "outcome": "passed", "keywords": ["test_registry_to_schema", "TestMCPPromptSchema", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011014193296432495, "outcome": "passed"}, "call": {"duration": 0.00013334257528185844, "outcome": "passed"}, "teardown": {"duration": 9.586196392774582e-05, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::test_full_prompt_workflow", "lineno": 263, "outcome": "failed", "keywords": ["test_full_prompt_workflow", "asyncio", "pytestmark", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00020453380420804024, "outcome": "passed"}, "call": {"duration": 0.00024355528876185417, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/mcp/test_prompts.py", "lineno": 298, "message": "AssertionError: assert '2 workflow prompts' in 'Processing... Found 0 workflow prompts'"}, "longrepr": "E   AssertionError: assert '2 workflow prompts' in 'Processing... Found 0 workflow prompts'"}, "teardown": {"duration": 0.00016048317775130272, "outcome": "passed"}}, {"nodeid": "tests/mcp/test_prompts.py::test_error_handling", "lineno": 301, "outcome": "passed", "keywords": ["test_error_handling", "asyncio", "pytestmark", "test_prompts.py", "mcp", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00021402398124337196, "outcome": "passed"}, "call": {"duration": 0.00023954501375555992, "outcome": "passed"}, "teardown": {"duration": 0.00015012314543128014, "outcome": "passed"}}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_1_basic_search", "lineno": 47, "outcome": "failed", "keywords": ["test_scenario_1_basic_search", "TestLevel0Scenarios", "test_level0_scenarios.py", "scenarios", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.025474824011325836, "outcome": "passed", "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154443.9083462, "msecs": 908.0, "relativeCreated": 67786.47375106812, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}]}, "call": {"duration": 4.302024125121534, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/scenarios/test_level0_scenarios.py", "lineno": 88, "message": "AssertionError: assert 'results' in [{'source': 'widened_search', 'video_id': 'rl_basics_001', 'title': 'Reinforcement Learning Fundamentals', 'channel_name': 'TwoMinutePapers', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'widened_search', 'video_id': 'SKAGSVyMr-w', 'title': 'Top Open Source GitHub Projects: AI, Code Security &amp; More! #127', 'channel_name': 'ManuAGI - AutoGPT Tutorials', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'widened_search', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'widened_search', 'video_id': '7IPPHuLI1tk', 'title': 'Open Source Gems: AI Agents, Diffusion Models &amp; More! #136', 'channel_name': 'ManuAGI - AutoGPT Tutorials', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}]"}, "longrepr": "E   AssertionError: assert 'results' in [{'source': 'widened_search', 'video_id': 'rl_basics_001', 'title': 'Reinforcement Learning Fundamentals', 'channel_name': 'TwoMinutePapers', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'widened_search', 'video_id': 'SKAGSVyMr-w', 'title': 'Top Open Source GitHub Projects: AI, Code Security &amp; More! #127', 'channel_name': 'ManuAGI - AutoGPT Tutorials', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'widened_search', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'widened_search', 'video_id': '7IPPHuLI1tk', 'title': 'Open Source Gems: AI Agents, Diffusion Models &amp; More! #136', 'channel_name': 'ManuAGI - AutoGPT Tutorials', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}]"}, "teardown": {"duration": 0.0002082441933453083, "outcome": "passed"}}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_2_search_with_no_results", "lineno": 97, "outcome": "failed", "keywords": ["test_scenario_2_search_with_no_results", "TestLevel0Scenarios", "test_level0_scenarios.py", "scenarios", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.02331235771998763, "outcome": "passed", "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154448.236921, "msecs": 236.0, "relativeCreated": 72115.04864692688, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}]}, "call": {"duration": 5.6289751483127475, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/scenarios/test_level0_scenarios.py", "lineno": 110, "message": "AssertionError: assert 'results' in []"}, "longrepr": "E   AssertionError: assert 'results' in []"}, "teardown": {"duration": 0.00018204422667622566, "outcome": "passed"}}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_3_search_widening", "lineno": 113, "outcome": "failed", "keywords": ["test_scenario_3_search_widening", "TestLevel0Scenarios", "test_level0_scenarios.py", "scenarios", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.025251539424061775, "outcome": "passed", "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154453.8902295, "msecs": 890.0, "relativeCreated": 77768.35703849792, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}]}, "call": {"duration": 4.817017299123108, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/scenarios/test_level0_scenarios.py", "lineno": 136, "message": "AttributeError: 'list' object has no attribute 'get'"}, "longrepr": "E   AttributeError: 'list' object has no attribute 'get'"}, "teardown": {"duration": 0.0020123720169067383, "outcome": "passed"}}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_4_citation_extraction", "lineno": 140, "outcome": "failed", "keywords": ["test_scenario_4_citation_extraction", "TestLevel0Scenarios", "test_level0_scenarios.py", "scenarios", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0001360829919576645, "outcome": "passed"}, "call": {"duration": 9.785920701920986, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/scenarios/test_level0_scenarios.py", "lineno": 171, "message": "AssertionError: assert None == '1810.04805'\n +  where None = Citation(type='arxiv', text='arXiv:1810.04805', id=None, authors=[], year='', title='', context=None, confidence=0.8, position=None).id"}, "longrepr": "E   AssertionError: assert None == '1810.04805'\n     +  where None = Citation(type='arxiv', text='arXiv:1810.04805', id=None, authors=[], year='', title='', context=None, confidence=0.8, position=None).id"}, "teardown": {"duration": 0.0001301332376897335, "outcome": "passed"}}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_5_metadata_extraction", "lineno": 172, "outcome": "failed", "keywords": ["test_scenario_5_metadata_extraction", "TestLevel0Scenarios", "test_level0_scenarios.py", "scenarios", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00012932205572724342, "outcome": "passed"}, "call": {"duration": 0.6209868509322405, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/scenarios/test_level0_scenarios.py", "lineno": 192, "message": "TypeError: Transcript.__init__() got an unexpected keyword argument 'content'"}, "longrepr": "E   TypeError: Transcript.__init__() got an unexpected keyword argument 'content'"}, "teardown": {"duration": 0.0001356932334601879, "outcome": "passed"}}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_6_channel_filtering", "lineno": 214, "outcome": "failed", "keywords": ["test_scenario_6_channel_filtering", "TestLevel0Scenarios", "test_level0_scenarios.py", "scenarios", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.025601805187761784, "outcome": "passed", "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154469.1457007, "msecs": 145.0, "relativeCreated": 93023.82826805115, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}]}, "call": {"duration": 3.4825196592137218, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/scenarios/test_level0_scenarios.py", "lineno": 245, "message": "TypeError: list indices must be integers or slices, not str"}, "longrepr": "E   TypeError: list indices must be integers or slices, not str"}, "teardown": {"duration": 0.0002076243981719017, "outcome": "passed"}}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_7_youtube_api_search", "lineno": 247, "outcome": "failed", "keywords": ["test_scenario_7_youtube_api_search", "TestLevel0Scenarios", "test_level0_scenarios.py", "scenarios", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.024056253023445606, "outcome": "passed", "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154472.6567507, "msecs": 656.0, "relativeCreated": 96534.87825393677, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}]}, "call": {"duration": 0.00013899197801947594, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/scenarios/test_level0_scenarios.py", "lineno": 257, "message": "AttributeError: 'UnifiedYouTubeSearch' object has no attribute 'youtube_api_key'. Did you mean: 'youtube_api'?"}, "longrepr": "E   AttributeError: 'UnifiedYouTubeSearch' object has no attribute 'youtube_api_key'. Did you mean: 'youtube_api'?"}, "teardown": {"duration": 0.0001544831320643425, "outcome": "passed"}}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_8_fetch_transcript", "lineno": 275, "outcome": "skipped", "keywords": ["test_scenario_8_fetch_transcript", "TestLevel0Scenarios", "test_level0_scenarios.py", "scenarios", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0232867868617177, "outcome": "passed", "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154472.6822207, "msecs": 682.0, "relativeCreated": 96560.34827232361, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}]}, "call": {"duration": 0.00013607321307063103, "outcome": "skipped", "longrepr": "('/home/graham/workspace/experiments/youtube_transcripts/tests/scenarios/test_level0_scenarios.py', 297, \"Skipped: Could not fetch transcript: 'UnifiedYouTubeSearch' object has no attribute 'fetch_single_transcript'\")"}, "teardown": {"duration": 0.00014524301514029503, "outcome": "passed"}}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_9_search_pagination", "lineno": 298, "outcome": "failed", "keywords": ["test_scenario_9_search_pagination", "TestLevel0Scenarios", "test_level0_scenarios.py", "scenarios", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0248516290448606, "outcome": "passed", "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154472.705985, "msecs": 705.0, "relativeCreated": 96584.11264419556, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}]}, "call": {"duration": 0.030471466947346926, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/scenarios/test_level0_scenarios.py", "lineno": 319, "message": "TypeError: UnifiedYouTubeSearch.search() got an unexpected keyword argument 'offset'"}, "longrepr": "E   TypeError: UnifiedYouTubeSearch.search() got an unexpected keyword argument 'offset'"}, "teardown": {"duration": 0.003530752845108509, "outcome": "passed"}}, {"nodeid": "tests/scenarios/test_level0_scenarios.py::TestLevel0Scenarios::test_scenario_10_scientific_classification", "lineno": 331, "outcome": "failed", "keywords": ["test_scenario_10_scientific_classification", "TestLevel0Scenarios", "test_level0_scenarios.py", "scenarios", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00013351300731301308, "outcome": "passed"}, "call": {"duration": 0.0004826011136174202, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/scenarios/test_level0_scenarios.py", "lineno": 367, "message": "TypeError: Transcript.__init__() got an unexpected keyword argument 'content'"}, "longrepr": "E   TypeError: Transcript.__init__() got an unexpected keyword argument 'content'"}, "teardown": {"duration": 0.00010756170377135277, "outcome": "passed"}}, {"nodeid": "tests/test_arangodb_connection.py::test_connection", "lineno": 31, "outcome": "passed", "keywords": ["test_connection", "test_arangodb_connection.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010690279304981232, "outcome": "passed"}, "call": {"duration": 0.009322455152869225, "outcome": "passed", "stderr": "2025-06-05 16:14:32.747 | INFO     | tests.test_arangodb_connection:test_connection:43 - Testing connection to http://localhost:8529\n2025-06-05 16:14:32.749 | SUCCESS  | tests.test_arangodb_connection:test_connection:53 - \u2705 Connection test passed\n2025-06-05 16:14:32.750 | SUCCESS  | tests.test_arangodb_connection:test_connection:71 - \u2705 Insert test passed - Document ID: transcripts/479798586\n2025-06-05 16:14:32.752 | SUCCESS  | tests.test_arangodb_connection:test_connection:80 - \u2705 Query test passed\n2025-06-05 16:14:32.753 | INFO     | tests.test_arangodb_connection:test_connection:91 - Full-text search returned 1 results\n2025-06-05 16:14:32.753 | SUCCESS  | tests.test_arangodb_connection:test_connection:92 - \u2705 Search view test passed\n2025-06-05 16:14:32.754 | SUCCESS  | tests.test_arangodb_connection:test_connection:96 - \u2705 Cleanup test passed\n2025-06-05 16:14:32.754 | INFO     | tests.test_arangodb_connection:test_connection:105 - \n============================================================\n2025-06-05 16:14:32.754 | SUCCESS  | tests.test_arangodb_connection:test_connection:106 - ALL TESTS PASSED! \ud83c\udf89\n2025-06-05 16:14:32.754 | INFO     | tests.test_arangodb_connection:test_connection:107 - ArangoDB is properly configured for YouTube transcripts\n2025-06-05 16:14:32.754 | INFO     | tests.test_arangodb_connection:test_connection:108 - ============================================================\n"}, "teardown": {"duration": 0.00013990327715873718, "outcome": "passed"}}, {"nodeid": "tests/test_integration_summary.py::test_integration", "lineno": 18, "outcome": "passed", "keywords": ["test_integration", "asyncio", "test_integration_summary.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00032898690551519394, "outcome": "passed"}, "call": {"duration": 2.3071995661593974, "outcome": "passed", "stdout": "YouTube Transcripts - Integration Test Summary\n============================================================\nDate: 2025-06-05T16:14:32.755750\n\n1. Testing SQLite Backend\n----------------------------------------\n\u2705 Stored 2 test videos\n\u2705 Search found 2 results\n\u2705 Found 0 supporting and 0 contradicting evidence\n\n2. Testing Dual Database Support\n----------------------------------------\nTesting backend auto-detection:\n\u2705 Default backend: SQLiteBackend\n\u2705 With prefer_arangodb: SQLiteBackend\n\n3. Key Features Summary\n----------------------------------------\n\u2705 Dual database support (SQLite/ArangoDB)\n\u2705 Bolster/Contradict functionality (matching arxiv-mcp-server)\n\u2705 Research analyzer with evidence finding\n\u2705 Database adapter pattern for seamless switching\n\u2705 Auto-detection of available backends\n\nReport saved to: /home/graham/workspace/experiments/youtube_transcripts/docs/reports/integration_test_summary.md\n"}, "teardown": {"duration": 0.00026155589148402214, "outcome": "passed"}}, {"nodeid": "tests/test_minimal.py::test_basic", "lineno": 2, "outcome": "passed", "keywords": ["test_basic", "test_minimal.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00012981286272406578, "outcome": "passed"}, "call": {"duration": 0.00014520296826958656, "outcome": "passed"}, "teardown": {"duration": 0.00011775270104408264, "outcome": "passed"}}, {"nodeid": "tests/test_minimal.py::test_import_youtube_transcripts", "lineno": 6, "outcome": "passed", "keywords": ["test_import_youtube_transcripts", "test_minimal.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011750217527151108, "outcome": "passed"}, "call": {"duration": 0.00012571178376674652, "outcome": "passed"}, "teardown": {"duration": 0.00011052191257476807, "outcome": "passed"}}, {"nodeid": "tests/test_minimal.py::test_import_agents", "lineno": 11, "outcome": "passed", "keywords": ["test_import_agents", "test_minimal.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0001187729649245739, "outcome": "passed"}, "call": {"duration": 0.0001229126937687397, "outcome": "passed"}, "teardown": {"duration": 9.7702257335186e-05, "outcome": "passed"}}, {"nodeid": "tests/test_minimal.py::test_import_agent_manager", "lineno": 16, "outcome": "passed", "keywords": ["test_import_agent_manager", "test_minimal.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010993285104632378, "outcome": "passed"}, "call": {"duration": 0.00012106308713555336, "outcome": "passed"}, "teardown": {"duration": 0.0001191222108900547, "outcome": "passed"}}, {"nodeid": "tests/test_reporter_verification.py::test_reporter_basic", "lineno": 6, "outcome": "passed", "keywords": ["test_reporter_basic", "test_reporter_verification.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00011397292837500572, "outcome": "passed"}, "call": {"duration": 9.588198736310005e-05, "outcome": "passed"}, "teardown": {"duration": 7.910095155239105e-05, "outcome": "passed"}}, {"nodeid": "tests/test_reporter_verification.py::test_reporter_with_output", "lineno": 11, "outcome": "passed", "keywords": ["test_reporter_with_output", "test_reporter_verification.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 9.562214836478233e-05, "outcome": "passed"}, "call": {"duration": 0.00013268319889903069, "outcome": "passed", "stdout": "Test output: Hello from test reporter\n"}, "teardown": {"duration": 8.151214569807053e-05, "outcome": "passed"}}, {"nodeid": "tests/test_reporter_verification.py::test_reporter_failure_example", "lineno": 18, "outcome": "failed", "keywords": ["test_reporter_failure_example", "test_reporter_verification.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 9.18419100344181e-05, "outcome": "passed"}, "call": {"duration": 0.000183184165507555, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/test_reporter_verification.py", "lineno": 24, "message": "AssertionError: Expected 5 but got 4\nassert 4 == 5"}, "longrepr": "E   AssertionError: Expected 5 but got 4\n    assert 4 == 5"}, "teardown": {"duration": 0.00033028703182935715, "outcome": "passed"}}, {"nodeid": "tests/test_reporter_verification.py::test_reporter_with_marker", "lineno": 26, "outcome": "passed", "keywords": ["test_reporter_with_marker", "slow", "pytestmark", "test_reporter_verification.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00012985290959477425, "outcome": "passed"}, "call": {"duration": 0.1003004377707839, "outcome": "passed"}, "teardown": {"duration": 0.00018523400649428368, "outcome": "passed"}}, {"nodeid": "tests/test_reporter_verification.py::TestReporterClass::test_class_method", "lineno": 37, "outcome": "passed", "keywords": ["test_class_method", "TestReporterClass", "test_reporter_verification.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00012971321120858192, "outcome": "passed"}, "call": {"duration": 0.0001119016669690609, "outcome": "passed"}, "teardown": {"duration": 9.852182120084763e-05, "outcome": "passed"}}, {"nodeid": "tests/test_reporter_verification.py::TestReporterClass::test_class_method_with_fixture", "lineno": 42, "outcome": "passed", "keywords": ["test_class_method_with_fixture", "TestReporterClass", "test_reporter_verification.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.000527240801602602, "outcome": "passed"}, "call": {"duration": 0.00021005375310778618, "outcome": "passed"}, "teardown": {"duration": 0.00011721206828951836, "outcome": "passed"}}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_exact_match_no_widening", "lineno": 60, "outcome": "passed", "keywords": ["test_exact_match_no_widening", "TestSearchWidening", "test_search_widening.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.006305802147835493, "outcome": "passed"}, "call": {"duration": 0.0004293289966881275, "outcome": "passed"}, "teardown": {"duration": 0.0001778639853000641, "outcome": "passed"}}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_synonym_expansion", "lineno": 71, "outcome": "passed", "keywords": ["test_synonym_expansion", "TestSearchWidening", "test_search_widening.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.005353882908821106, "outcome": "passed"}, "call": {"duration": 0.0016320939175784588, "outcome": "passed"}, "teardown": {"duration": 0.00015973392874002457, "outcome": "passed"}}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_fuzzy_matching", "lineno": 86, "outcome": "passed", "keywords": ["test_fuzzy_matching", "TestSearchWidening", "test_search_widening.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.005535236094146967, "outcome": "passed"}, "call": {"duration": 0.00039493758231401443, "outcome": "passed"}, "teardown": {"duration": 0.00016191275790333748, "outcome": "passed"}}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_no_results_after_widening", "lineno": 97, "outcome": "passed", "keywords": ["test_no_results_after_widening", "TestSearchWidening", "test_search_widening.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00550691457465291, "outcome": "passed"}, "call": {"duration": 0.0012112660333514214, "outcome": "passed"}, "teardown": {"duration": 0.0001706141047179699, "outcome": "passed"}}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_widening_with_channels", "lineno": 107, "outcome": "passed", "keywords": ["test_widening_with_channels", "TestSearchWidening", "test_search_widening.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.005500255152583122, "outcome": "passed"}, "call": {"duration": 0.001341738272458315, "outcome": "passed"}, "teardown": {"duration": 0.00016130274161696434, "outcome": "passed"}}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_semantic_expansion", "lineno": 120, "outcome": "passed", "keywords": ["test_semantic_expansion", "TestSearchWidening", "test_search_widening.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0054015531204640865, "outcome": "passed"}, "call": {"duration": 0.0023427987471222878, "outcome": "passed"}, "teardown": {"duration": 0.00016162311658263206, "outcome": "passed"}}, {"nodeid": "tests/test_search_widening.py::TestSearchWidening::test_widening_explanation", "lineno": 141, "outcome": "passed", "keywords": ["test_widening_explanation", "TestSearchWidening", "test_search_widening.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.005272140260785818, "outcome": "passed"}, "call": {"duration": 0.0013108081184327602, "outcome": "passed"}, "teardown": {"duration": 0.00015829317271709442, "outcome": "passed"}}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_basic_search_without_optimization", "lineno": 74, "outcome": "failed", "keywords": ["test_basic_search_without_optimization", "TestUnifiedSearch", "test_unified_search.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.0064523848704993725, "outcome": "passed"}, "call": {"duration": 0.023562803398817778, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/test_unified_search.py", "lineno": 87, "message": "AssertionError: assert 'query' in [{'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'SKAGSVyMr-w', 'title': 'Top Open Source GitHub Projects: AI, Code Security &amp; More! #127', 'channel_name': 'ManuAGI - AutoGPT Tutorials', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': '7IPPHuLI1tk', 'title': 'Open Source Gems: AI Agents, Diffusion Models &amp; More! #136', 'channel_name': 'ManuAGI - AutoGPT Tutorials', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}]"}, "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154475.2517943, "msecs": 251.0, "relativeCreated": 99129.92191314697, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}], "longrepr": "E   AssertionError: assert 'query' in [{'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_002', 'title': 'Building with VERL: A Tutorial', 'channel_name': 'DiscoverAI', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'verl_001', 'title': 'VERL: Volcano Engine RL for LLMs', 'channel_name': 'TrelisResearch', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': 'SKAGSVyMr-w', 'title': 'Top Open Source GitHub Projects: AI, Code Security &amp; More! #127', 'channel_name': 'ManuAGI - AutoGPT Tutorials', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}, {'source': 'local_db', 'video_id': '7IPPHuLI1tk', 'title': 'Open Source Gems: AI Agents, Diffusion Models &amp; More! #136', 'channel_name': 'ManuAGI - AutoGPT Tutorials', 'content': '', 'url': '', 'published_at': '', 'score': 0.0}]"}, "teardown": {"duration": 0.00020239409059286118, "outcome": "passed"}}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_search_with_optimization", "lineno": 107, "outcome": "failed", "keywords": ["test_search_with_optimization", "TestUnifiedSearch", "test_unified_search.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.006546417251229286, "outcome": "passed"}, "call": {"duration": 7.0849777781404555, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/test_unified_search.py", "lineno": 119, "message": "TypeError: list indices must be integers or slices, not str"}, "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154475.2825263, "msecs": 282.0, "relativeCreated": 99160.65382957458, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}], "longrepr": "E   TypeError: list indices must be integers or slices, not str"}, "teardown": {"duration": 0.0005138609558343887, "outcome": "passed"}}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_channel_specific_search", "lineno": 124, "outcome": "failed", "keywords": ["test_channel_specific_search", "TestUnifiedSearch", "test_unified_search.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00787031464278698, "outcome": "passed"}, "call": {"duration": 0.022827636916190386, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/test_unified_search.py", "lineno": 133, "message": "TypeError: UnifiedYouTubeSearch.search() got an unexpected keyword argument 'channels'"}, "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154482.3782165, "msecs": 378.0, "relativeCreated": 106256.34407997131, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}], "longrepr": "E   TypeError: UnifiedYouTubeSearch.search() got an unexpected keyword argument 'channels'"}, "teardown": {"duration": 0.0001882743090391159, "outcome": "passed"}}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_query_optimizer_directly", "lineno": 145, "outcome": "failed", "keywords": ["test_query_optimizer_directly", "TestUnifiedSearch", "test_unified_search.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.00010171206668019295, "outcome": "passed"}, "call": {"duration": 10.405654402915388, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/test_unified_search.py", "lineno": 167, "message": "AssertionError: Expected 'Volcano Engine Reinforcement Learning' in optimized query for 'VERL', got: VERL transcript\nassert 'volcano engine reinforcement learning' in 'verl transcript'\n +  where 'volcano engine reinforcement learning' = <built-in method lower of str object at 0x737d114f3910>()\n +    where <built-in method lower of str object at 0x737d114f3910> = 'Volcano Engine Reinforcement Learning'.lower\n +  and   'verl transcript' = <built-in method lower of str object at 0x737ceb7afdb0>()\n +    where <built-in method lower of str object at 0x737ceb7afdb0> = 'VERL transcript'.lower"}, "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154482.4016411, "msecs": 401.0, "relativeCreated": 106279.76870536804, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}], "longrepr": "E   AssertionError: Expected 'Volcano Engine Reinforcement Learning' in optimized query for 'VERL', got: VERL transcript\n    assert 'volcano engine reinforcement learning' in 'verl transcript'\n     +  where 'volcano engine reinforcement learning' = <built-in method lower of str object at 0x737d114f3910>()\n     +    where <built-in method lower of str object at 0x737d114f3910> = 'Volcano Engine Reinforcement Learning'.lower\n     +  and   'verl transcript' = <built-in method lower of str object at 0x737ceb7afdb0>()\n     +    where <built-in method lower of str object at 0x737ceb7afdb0> = 'VERL transcript'.lower"}, "teardown": {"duration": 0.00012389197945594788, "outcome": "passed"}}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_empty_query_handling", "lineno": 169, "outcome": "failed", "keywords": ["test_empty_query_handling", "TestUnifiedSearch", "test_unified_search.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.007388285361230373, "outcome": "passed"}, "call": {"duration": 0.02343904972076416, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/test_unified_search.py", "lineno": 181, "message": "TypeError: list indices must be integers or slices, not str"}, "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154492.8164651, "msecs": 816.0, "relativeCreated": 116694.59271430969, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}], "longrepr": "E   TypeError: list indices must be integers or slices, not str"}, "teardown": {"duration": 0.0006842450238764286, "outcome": "passed"}}, {"nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_multi_word_search", "lineno": 183, "outcome": "failed", "keywords": ["test_multi_word_search", "TestUnifiedSearch", "test_unified_search.py", "tests", "youtube_transcripts", ""], "setup": {"duration": 0.006780852098017931, "outcome": "passed"}, "call": {"duration": 0.023465291131287813, "outcome": "failed", "crash": {"path": "/home/graham/workspace/experiments/youtube_transcripts/tests/test_unified_search.py", "lineno": 195, "message": "TypeError: list indices must be integers or slices, not str"}, "log": [{"name": "youtube_transcripts.deepretrieval_optimizer", "msg": "Could not load LoRA adapter: No module named 'unsloth'", "args": null, "levelname": "WARNING", "levelno": 30, "pathname": "/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/deepretrieval_optimizer.py", "filename": "deepretrieval_optimizer.py", "module": "deepretrieval_optimizer", "exc_info": null, "exc_text": null, "stack_info": null, "lineno": 67, "funcName": "_load_lora_adapter", "created": 1749154492.8497741, "msecs": 849.0, "relativeCreated": 116727.90169715881, "thread": 126989017604416, "threadName": "MainThread", "processName": "MainProcess", "process": 3823623, "taskName": null}], "longrepr": "E   TypeError: list indices must be integers or slices, not str"}, "teardown": {"duration": 0.0005072802305221558, "outcome": "passed"}}], "warnings": [{"message": "cannot collect test class 'TestReportGenerator' because it has a __init__ constructor (from: tests/integration/test_database_adapter.py)", "category": "PytestCollectionWarning", "when": "collect", "filename": "/home/graham/workspace/experiments/youtube_transcripts/tests/integration/test_database_adapter.py", "lineno": 35}, {"message": "Expected None, but tests/test_arangodb_connection.py::test_connection returned True, which will be an error in a future version of pytest.  Did you mean to use `assert` instead of `return`?", "category": "PytestReturnNotNoneWarning", "when": "runtest", "filename": "/home/graham/workspace/experiments/youtube_transcripts/.venv/lib/python3.12/site-packages/_pytest/python.py", "lineno": 163}]}