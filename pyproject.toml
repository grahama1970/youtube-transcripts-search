[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "youtube-transcripts"
version = "0.1.0"
description = "A tool for fetching, storing, and searching YouTube transcripts with full-text search capabilities"
authors = [{ name = "Graham Anderson", email = "graham@grahama.co" }]
requires-python = ">=3.10.11"
readme = "README.md"
license = "MIT"
keywords = [
    "youtube",
    "transcripts",
    "search",
    "sqlite",
    "fts5",
    "mcp",
    "machine-learning"
]

dependencies = [
    "pytube>=15.0.0",
    "youtube-transcript-api>=0.6.0",
    "rich>=13.0.0",
    "typer>=0.9.0",
    "pydantic>=2.0.0",
    "google-generativeai>=0.3.0",
    "python-dotenv>=1.0.0",
    "ollama>=0.1.0",
    "python-arango>=8.1.4", # Use python-arango instead of arangodb
    "claude-test-reporter @ git+https://github.com/grahama1970/claude-test-reporter.git",
    "claude-module-communicator @ git+https://github.com/grahama1970/claude-module-communicator.git",
    "spacy>=3.8.7",
    "youtube-dl>=2021.12.17",
    "yt-dlp>=2025.5.22",
    "whisper>=1.1.10",
    "loguru>=0.7.3",
    "pydantic-settings>=2.9.1",
    "aiohttp>=3.12.2",
    "sentence-transformers>=4.1.0",
    "tree-sitter>=0.24.0",
    "tree-sitter-languages>=1.10.2",
    "linkify-it-py>=2.0.3",
    "validators>=0.35.0",
    "tenacity>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "pytest-json-report>=1.5.0",
    "ruff>=0.3.0",
    "ipython>=8.0.0",
]

research = [
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "matplotlib>=3.7.0",
    "scikit-learn>=1.3.0",
]

[project.scripts]
youtube-cli = "youtube_transcripts.cli.app:app"
fetch-transcripts = "fetch_transcripts_cron:main"

[project.urls]
Repository = "https://github.com/grahama1970/youtube_transcripts"
Documentation = "https://github.com/grahama1970/youtube_transcripts/blob/main/README.md"

[tool.hatch.version]
path = "src/youtube_transcripts/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["src/youtube_transcripts"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/docs",
    "README.md",
    "LICENSE",
    "pyproject.toml",
]

[tool.ruff]
line-length = 120
target-version = "py310"
select = ["E", "F", "I", "N", "W", "UP", "B", "C4", "SIM", "RUF"]
ignore = ["E501"]

[tool.ruff.lint.isort]
known-first-party = ["youtube_transcripts"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --tb=short --strict-markers"
pythonpath = ["src"]
asyncio_mode = "auto"
markers = [
    "integration: marks tests as integration tests (may require external services)",
    "honeypot: marks tests as honeypot tests designed to fail",
    "minimum_duration: marks tests that must meet a minimum duration threshold",
    "slow: marks tests as slow running",
    "unit: marks tests as unit tests",
    "level_0: marks tests as Level 0 unit tests (no external dependencies)",
    "level_1: marks tests as Level 1 component integration tests",
    "level_2: marks tests as Level 2 module interaction tests",
    "level_3: marks tests as Level 3 multi-module orchestration tests",
    "level_4: marks tests as Level 4 UI integration tests",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true

[dependency-groups]
dev = [
    "pytest>=8.3.5",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=6.1.1",
]
