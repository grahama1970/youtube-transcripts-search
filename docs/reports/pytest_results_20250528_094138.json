{
  "created": 1748439703.6841161,
  "duration": 5.41665244102478,
  "exitcode": 2,
  "root": "/home/graham/workspace/experiments/youtube_transcripts",
  "environment": {},
  "summary": {
    "total": 0,
    "collected": 23
  },
  "collectors": [
    {
      "nodeid": "",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests",
          "type": "Dir"
        }
      ]
    },
    {
      "nodeid": "tests/cli",
      "outcome": "passed",
      "result": []
    },
    {
      "nodeid": "tests/core",
      "outcome": "passed",
      "result": []
    },
    {
      "nodeid": "tests/mcp",
      "outcome": "passed",
      "result": []
    },
    {
      "nodeid": "tests/test_agents.py::TestAgentSystem",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_agents.py::TestAgentSystem::test_agent_manager_task_submission",
          "type": "Coroutine",
          "lineno": 37
        },
        {
          "nodeid": "tests/test_agents.py::TestAgentSystem::test_search_optimizer_agent_execution",
          "type": "Coroutine",
          "lineno": 63
        },
        {
          "nodeid": "tests/test_agents.py::TestAgentSystem::test_agent_progress_tracking",
          "type": "Coroutine",
          "lineno": 91
        },
        {
          "nodeid": "tests/test_agents.py::TestAgentSystem::test_agent_message_passing",
          "type": "Coroutine",
          "lineno": 112
        },
        {
          "nodeid": "tests/test_agents.py::TestAgentSystem::test_concurrent_agent_execution",
          "type": "Coroutine",
          "lineno": 145
        },
        {
          "nodeid": "tests/test_agents.py::TestAgentSystem::test_agent_error_handling",
          "type": "Coroutine",
          "lineno": 168
        },
        {
          "nodeid": "tests/test_agents.py::TestAgentSystem::test_task_cancellation",
          "type": "Coroutine",
          "lineno": 187
        }
      ]
    },
    {
      "nodeid": "tests/test_agents.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_agents.py::TestAgentSystem",
          "type": "Class"
        }
      ]
    },
    {
      "nodeid": "tests/test_database.py::TestDatabaseOperations",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_database.py::TestDatabaseOperations::test_initialize_database_creates_tables",
          "type": "Function",
          "lineno": 37
        },
        {
          "nodeid": "tests/test_database.py::TestDatabaseOperations::test_add_transcript_with_real_data",
          "type": "Function",
          "lineno": 56
        },
        {
          "nodeid": "tests/test_database.py::TestDatabaseOperations::test_search_transcripts_with_special_characters",
          "type": "Function",
          "lineno": 90
        },
        {
          "nodeid": "tests/test_database.py::TestDatabaseOperations::test_search_ranking_with_real_data",
          "type": "Function",
          "lineno": 128
        },
        {
          "nodeid": "tests/test_database.py::TestDatabaseOperations::test_channel_filtering",
          "type": "Function",
          "lineno": 170
        },
        {
          "nodeid": "tests/test_database.py::TestDatabaseOperations::test_cleanup_old_transcripts",
          "type": "Function",
          "lineno": 193
        }
      ]
    },
    {
      "nodeid": "tests/test_database.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_database.py::TestDatabaseOperations",
          "type": "Class"
        }
      ]
    },
    {
      "nodeid": "tests/test_real_youtube.py::TestRealYouTube",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_real_youtube.py::TestRealYouTube::test_extract_video_id",
          "type": "Function",
          "lineno": 23
        },
        {
          "nodeid": "tests/test_real_youtube.py::TestRealYouTube::test_fetch_real_transcript",
          "type": "Function",
          "lineno": 37
        },
        {
          "nodeid": "tests/test_real_youtube.py::TestRealYouTube::test_get_channel_videos_real",
          "type": "Function",
          "lineno": 54
        },
        {
          "nodeid": "tests/test_real_youtube.py::TestRealYouTube::test_process_channels_with_empty_list",
          "type": "Function",
          "lineno": 78
        }
      ]
    },
    {
      "nodeid": "tests/test_real_youtube.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_real_youtube.py::TestRealYouTube",
          "type": "Class"
        }
      ]
    },
    {
      "nodeid": "tests/test_unified_search.py::TestUnifiedSearch",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_basic_search_without_optimization",
          "type": "Function",
          "lineno": 66
        },
        {
          "nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_search_with_optimization",
          "type": "Function",
          "lineno": 93
        },
        {
          "nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_channel_specific_search",
          "type": "Function",
          "lineno": 111
        },
        {
          "nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_query_optimizer_directly",
          "type": "Function",
          "lineno": 132
        },
        {
          "nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_empty_query_handling",
          "type": "Function",
          "lineno": 154
        },
        {
          "nodeid": "tests/test_unified_search.py::TestUnifiedSearch::test_multi_word_search",
          "type": "Function",
          "lineno": 168
        }
      ]
    },
    {
      "nodeid": "tests/test_unified_search.py",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/test_unified_search.py::TestUnifiedSearch",
          "type": "Class"
        }
      ]
    },
    {
      "nodeid": "tests/test_youtube_fetch.py",
      "outcome": "failed",
      "result": [],
      "longrepr": "ImportError while importing test module '/home/graham/workspace/experiments/youtube_transcripts/tests/test_youtube_fetch.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\n../../../.venv/lib/python3.11/site-packages/_pytest/python.py:493: in importtestmodule\n    mod = import_path(\n../../../.venv/lib/python3.11/site-packages/_pytest/pathlib.py:587: in import_path\n    importlib.import_module(module_name)\n../../../.local/share/uv/python/cpython-3.11.12-linux-x86_64-gnu/lib/python3.11/importlib/__init__.py:126: in import_module\n    return _bootstrap._gcd_import(name[level:], package, level)\n<frozen importlib._bootstrap>:1204: in _gcd_import\n    ???\n<frozen importlib._bootstrap>:1176: in _find_and_load\n    ???\n<frozen importlib._bootstrap>:1147: in _find_and_load_unlocked\n    ???\n<frozen importlib._bootstrap>:690: in _load_unlocked\n    ???\n../../../.venv/lib/python3.11/site-packages/_pytest/assertion/rewrite.py:185: in exec_module\n    exec(co, module.__dict__)\ntests/test_youtube_fetch.py:14: in <module>\n    from youtube_transcripts.core.transcript import fetch_channel_videos, fetch_transcript_for_video\nE   ImportError: cannot import name 'fetch_channel_videos' from 'youtube_transcripts.core.transcript' (/home/graham/workspace/experiments/youtube_transcripts/src/youtube_transcripts/core/transcript.py)"
    },
    {
      "nodeid": "tests",
      "outcome": "passed",
      "result": [
        {
          "nodeid": "tests/cli",
          "type": "Dir"
        },
        {
          "nodeid": "tests/core",
          "type": "Dir"
        },
        {
          "nodeid": "tests/mcp",
          "type": "Dir"
        },
        {
          "nodeid": "tests/test_agents.py",
          "type": "Module"
        },
        {
          "nodeid": "tests/test_database.py",
          "type": "Module"
        },
        {
          "nodeid": "tests/test_real_youtube.py",
          "type": "Module"
        },
        {
          "nodeid": "tests/test_unified_search.py",
          "type": "Module"
        },
        {
          "nodeid": "tests/test_youtube_fetch.py",
          "type": "Module"
        }
      ]
    }
  ],
  "tests": []
}